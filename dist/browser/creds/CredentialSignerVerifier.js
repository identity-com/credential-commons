"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault"),_classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck")),_createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass")),_=require("lodash"),_require=require("bitcoinjs-lib"),HDNode=_require.HDNode,ECSignature=_require.ECSignature,SIGNATURE_ALGO="ec256k1",CredentialSignerVerifier=function(){function a(b){if((0,_classCallCheck2.default)(this,a),_.isEmpty(b.keyPair)&&_.isEmpty(b.prvBase58)&&_.isEmpty(b.pubBase58))throw new Error("Either a keyPair, prvBase58 or pubBase58(to verify only) is required");this.keyPair=b.keyPair||HDNode.fromBase58(b.prvBase58||b.pubBase58)}return(0,_createClass2.default)(a,[{key:"isSignatureValid",value:function(a){if(_.isEmpty(a.proof)||_.isEmpty(a.proof.merkleRoot)||_.isEmpty(a.proof.merkleRootSignature))throw Error("Invalid Credential Proof Schema");try{var b=_.get(a,"proof.merkleRootSignature.signature"),c=b?ECSignature.fromDER(Buffer.from(b,"hex")):null,d=_.get(a,"proof.merkleRoot");return!!(c&&d)&&this.keyPair.verify(Buffer.from(d,"hex"),c)}catch(a){return!1}}},{key:"sign",value:function(a){var b=Buffer.from(a.merkleRoot,"hex"),c=this.keyPair.sign(b);return{algo:SIGNATURE_ALGO,pubBase58:this.keyPair.neutered().toBase58(),signature:c.toDER().toString("hex")}}}]),a}();module.exports=CredentialSignerVerifier;